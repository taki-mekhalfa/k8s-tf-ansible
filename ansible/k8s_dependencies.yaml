- name: Install k8s dependencies on nodes
  vars:
    k8s_version: 1.29
  any_errors_fatal: true
  hosts: nodes
  become: true
  tasks:
    - name: Check distribution
      ansible.builtin.fail:
        msg: "OS should be Ubuntu 22.04 and not {{ ansible_distribution }}: {{ ansible_distribution_version }}"
      when:
        - ansible_distribution != "Ubuntu"
        - ansible_distribution_version != "22.04"
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true
    - name: Disable swap
      changed_when: false
      ansible.builtin.command: swapoff -a
    - name: Disable swap on fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
    - name: Create /etc/modules-load.d/k8s.conf with the required content
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'
    - name: Create /etc/sysctl.d/k8s.conf with the required content
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'
    - name: Apply sysctl params without reboot
      ansible.builtin.command:
        cmd: sysctl --system
      changed_when: false
    - name: Install containerd
      ansible.builtin.apt:
        name: containerd
        state: present
    - name: Add containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    - name: Add containerd config file
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml
        creates: /etc/containerd/config.toml
    - name: Configure systemd cgroup driver for containerd
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '(\s+)SystemdCgroup = false'
        line: '\1SystemdCgroup = true'
        backrefs: true
    - name: Enable the Containerd service and start it
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true
        daemon-reload: true
    - name: Install k8s components dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present
    - name: Ensure /etc/apt/keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    - name: Download Kubernetes apt key
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key
        dest: /tmp/kubernetes-apt-keyring.key
        mode: '0644'
    - name: Process and move the Kubernetes apt key
      ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - name: Add Kubernetes repository to sources list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /'
        create: true
        state: present
        mode: '0644'
    - name: Update apt packages
      ansible.builtin.apt:
        update_cache: true
    - name: Install k8s components
      ansible.builtin.apt:
        name:
          - kubelet={{ k8s_version }}.*
          - kubeadm={{ k8s_version }}.*
        state: present

    - name: Install masters components
      when: inventory_hostname in groups['masters']
      block:
        - name: Install kubectl
          ansible.builtin.apt:
            name:
              - kubectl={{ k8s_version }}.*
            state: present

    - name: Mark Kubernetes packages as held
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    - name: Enable the Kubelet service, and enable it persistently
      ansible.builtin.service:
        name: kubelet
        enabled: true
    - name: Reboot the machines and wait for them to come back
      ansible.builtin.reboot:
